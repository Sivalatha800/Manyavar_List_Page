 checkBoxFun(event: any, keyName: any) {
    const selectedList = {
      displayName: keyName,
      urlName: event.target.value,
      isChecked: event.target.checked,
    };
    if (this.checkBoxData.length == 0) {
      this.checkBoxData.push(selectedList);
    } else {
      if (event.target.checked == false) {
        this.checkBoxData.forEach((check, index) => {
          if (check.urlName == event.target.value) {
            this.checkBoxData.splice(index, 1);
          }
        });
      } else {
        this.checkBoxData.push(selectedList);
      }
    }
    //pass parameters to url
    this.passParameters();
    //get api Call for filters
  }

  checkBoxFun(event: any, keyName: any) {
    let { checked, value } = event.target;
    if (checked) {
      this.checkedItems.map();
    } else {
      let index = this.checkedItems.indexOf(value);
      if (index !== -1) this.checkedItems.splice(index, 1);
    }
    console.log(this.checkedItems);
  }


  checkBoxFun(event: any, keyName: any) {
    if (this.checkBoxData.length == 0) {
      const selectedList = {
        displayName: keyName,
        urlName: event.target.value,
        isChecked: event.target.checked,
      };
      this.checkBoxData.push(selectedList);
    } else {
      if (event.target.checked == true) {
        this.checkBoxData.forEach((check) => {
          if (check.displayName == keyName) {
            console.log(check);
          }
        });
      }
      if (event.target.checked == false) {
        this.checkBoxData.forEach((check, index) => {
          if (check.urlName == event.target.value) {
            this.checkBoxData.splice(index, 1);
          }
        });
      }
    }
    console.log(this.checkBoxData);
  }



  checkBoxFun(event: any, keyName: any) {
    if (event.target.checked == true) {
      debugger;
      if (this.checkBoxData.length == 0) {
        const selectData = {
          [keyName]: event.target.value,
        };
        this.checkBoxData.push(selectData);
      } else {
        for (let data of this.checkBoxData) {
          Object.keys(data).map((key) => {
            if (key == keyName) {
              console.log(Object);
            } else {
              const selectData = {
                [keyName]: event.target.value,
              };
              this.checkBoxData.push(selectData);
            }
          });
        }
        console.log(this.checkBoxData);
      }
    }
    console.log(this.checkBoxData);
  }


  if (key == keyName) {
    data[key].push(event.target.value);
    console.log(data[key]);
  } else {
    const selectData = {
      [keyName]: event.target.value,
    };
    this.checkBoxData.push(selectData);
  }

  Object.keys(data).forEach((key) => {
    if (key !== keyName) {
      subData = { [keyName]: [event.target.value] };
    } else {
      data[key].push(event.target.value);
    }
  });

  [checked]="isCheck ? fltr.IsEnable : null"
  isCheck: boolean = false;
  this.isCheck = true;

  if (event.target.checked == true) {
    let url = {
      [keyName]: event.target.value,
    };
    this.route.navigate([this.listService.parem1, this.listService.parem2], {
      queryParams: url,
    });
    this.getParams();
    setTimeout(() => {
      this.getList();
    }, 300);
  }


  let checkedVal = Object.keys(this.checkBoxData);
    checkedVal = checkedVal.filter((key) => this.checkBoxData[key] == true);
    var checkedJoin = checkedVal.join(':');

    if (checkedJoin != '') {
      url = {
        [keyName]: checkedJoin,
      };
    }
    this.route.navigate([this.listService.parem1, this.listService.parem2], {
      queryParams: url,
    });
    this.getParams();
    setTimeout(() => {
      this.getList();
    }, 300);
  

    if (checked == true) {
      if (this.checkBoxData2.length == 0) {
        this.checkBoxData2.push({ [keyName]: value });
      } else {
        console.log('Multy Select');
      }
    } else {
      this.checkBoxData2.forEach((check: any, index: any) => {
        let val = Object.keys(check);
        val = val.filter((key) => {
          if (check[key] == value) {
          }
        });
      });
    }


    onCheck(check: any, value: number) {
      let qValue = value;
      let array = [];
      array.push(qValue);
      this.filter.set(check, array);
      let Obj: { [index: string]: string } = Array.from(
        this.filter
      ).reduce(
  
        (Obj, [key, value]) => Object.assign(Obj, { [key]: value.join(':') }),
  
        {}
  
      );
      let queryParams = Obj
      this.route.navigate([], { queryParams });
      this.str = '';
      for (let key in Obj) {
        this.str = this.str + `${key}=${Obj[key]}|`
      }
      this.str = this.str.substring(0, this.str.length - 1);
      this.Filterproducts(1, this.str);
      // this.itemkyes = Object.keys( this.ResponceData);
  
      // this.itemkyes = this.itemkyes.filter(url =>this.fitFiltersList[url] == true);
  
      // var str = itemkeys.join(":");
      if(this.param3!==undefined){
  
      }
    }
  